name: Release

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  soot-wrapper:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ 11, 17, 21 ]
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'debricked/soot-wrapper'

      - name: Calculate checksum
        id: calc-checksum
        run: echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Cache JARs
        uses: actions/cache@v4
        id: cache-jars
        with:
          path: |
            java/common/target/*.jar
          key: ${{ runner.os }}-soot-wrapper-${{ matrix.java-version }}-${{ steps.calc-checksum.outputs.hash }}

      - name: Set up JDK ${{ matrix.java-version }}
        if: steps.cache-jars.outputs.cache-hit != 'true'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'adopt'

      - name: Build with Maven
        if: steps.cache-jars.outputs.cache-hit != 'true'
        run: |
          cd java/common/
          mvn clean package -X -DskipTests

      - name: Upload JAR if cache missed
        if: steps.cache-jars.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: soot-wrapper-${{ matrix.java-version }}.jar
          path: java/common/target/*.jar

  goreleaser:
    runs-on: ubuntu-latest
    needs: soot-wrapper
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: git fetch --force --tags
      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.20'
          cache: true

      - name: Import GPG signing key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Pull Supported Formats
        run: |
          cd cmd/debricked
          go generate -v -x

      - uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

      - name: Download JARs
        uses: actions/download-artifact@v4

      - name: Add JARs to release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            /home/runner/work/cli/cli/soot-wrapper-11.jar
            /home/runner/work/cli/cli/soot-wrapper-17.jar
            /home/runner/work/cli/cli/soot-wrapper-21.jar

  aur:
    runs-on: ubuntu-latest
    needs: goreleaser
    container:
      image: archlinux/archlinux:base-devel
    steps:
      - name: Prepare Arch Linux container
        run: |
          pacman -Syu --noconfirm git go openssh pacman-contrib
          useradd -m aur

      # Setup SSH access to aur.archlinux.org
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

      # Now actually clone AUR repo, and update to new version
      - name: Build package and update AUR
        run: |
          export NEW_VERSION="${GITHUB_REF_NAME#v}"
          sudo -u aur sh -c "mkdir -p /home/aur/.ssh && chmod 700 /home/aur/.ssh && touch /home/aur/.ssh/known_hosts && chmod 600 /home/aur/.ssh/known_hosts"
          sudo -u aur sh -c "echo 'aur.archlinux.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEuBKrPzbawxA/k2g6NcyV5jmqwJ2s+zpgZGZ7tpLIcN' >> /home/aur/.ssh/known_hosts"
          mkdir -p /root/.ssh && chmod 700 /root/.ssh && cp /home/aur/.ssh/known_hosts /root/.ssh/known_hosts && chown root: /root/.ssh/known_hosts
          # clone repo
          git clone aur@aur.archlinux.org:debricked.git debricked
          chown -R aur debricked/
          cd debricked/
          sudo -u aur NEW_VERSION="${NEW_VERSION}" make update_version
          sudo -u aur make package
          sudo -u aur git diff
          sudo -u aur git config user.email noreply@debricked.com
          sudo -u aur git config user.name "Debricked build bot"
          git config --global --add safe.directory "$PWD"
          make push
