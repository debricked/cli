package vulnerability

import (
	"debricked/pkg/report"
	"debricked/pkg/report/vulnerability"
	"errors"
	"fmt"
	"github.com/fatih/color"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var email string

const EmailFlag = "email"

func NewVulnerabilityCmd(reporter report.IReporter) *cobra.Command {
	cmd := &cobra.Command{
		Use:   "vulnerability",
		Short: "Generate vulnerability report",
		Long: `Generate vulnerability report for all your repositories. 
This is a premium feature. Please visit https://debricked.com/pricing/ for more info.
The finished report will be sent to the specified email address.`,
		RunE: RunE(reporter),
	}

	cmd.Flags().StringVarP(&email, EmailFlag, "e", "", "The email address that the report will be sent to")
	_ = cmd.MarkFlagRequired(EmailFlag)
	viper.MustBindEnv(EmailFlag)

	return cmd
}

func RunE(r report.IReporter) func(_ *cobra.Command, args []string) error {
	return func(_ *cobra.Command, _ []string) error {
		orderArgs := vulnerability.OrderArgs{Email: viper.GetString(EmailFlag)}
		if err := r.Order(orderArgs); err != nil {
			return errors.New(fmt.Sprintf("%s %s\n", color.RedString("⨯"), err.Error()))
		}

		fmt.Printf("%s Successfully ordered vulnerability report\n", color.GreenString("✔"))

		return nil
	}
}
