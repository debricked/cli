package vulnerability

import (
	"debricked/pkg/client"
	"errors"
	"fmt"
	"github.com/fatih/color"
	"github.com/spf13/cobra"
	"net/http"
)

var debClient client.Client

var email string

func NewVulnerabilityCmd(debrickedClient *client.Client) *cobra.Command {
	debClient = *debrickedClient
	cmd := &cobra.Command{
		Use:   "vulnerability",
		Short: "Generate vulnerability report",
		Long: `Generate vulnerability report for all your repositories. 
This is a premium feature. Please visit https://debricked.com/pricing/ for more info.
The finished report will be sent to the specified email address.`,
		RunE: run,
	}

	cmd.Flags().StringVarP(&email, "email", "e", "", "The email address that the report will be sent to")
	_ = cmd.MarkFlagRequired("email")

	return cmd
}

func run(_ *cobra.Command, _ []string) error {
	if err := report(); err != nil {
		return errors.New(fmt.Sprintf("%s %s\n", color.RedString("⨯"), err.Error()))
	}

	fmt.Printf("%s Successfully ordered vulnerability report\n", color.GreenString("✔"))

	return nil
}

func report() error {
	uri := fmt.Sprintf("/api/1.0/open/repositories/get-repositories?order=asc&generateExcel=1&email=%s", email)
	res, err := debClient.Get(uri, "application/json")
	if err != nil {
		return err
	}
	if res.StatusCode == http.StatusForbidden {
		return errors.New("premium feature. Please visit https://debricked.com/pricing/ for more info")
	}

	if res.StatusCode != http.StatusOK {
		return errors.New(fmt.Sprintf("failed to order report. Status code: %d", res.StatusCode))
	}

	return nil
}
