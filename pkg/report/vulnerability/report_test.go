package vulnerability

import (
	"errors"
	"fmt"
	"net/http"
	"testing"

	"github.com/debricked/cli/pkg/client/testdata"
	"github.com/stretchr/testify/assert"
)

func TestOrderBadArgs(t *testing.T) {
	debClientMock := &testdata.DebClientMock{}
	reporter := Reporter{DebClient: debClientMock}
	args := struct{}{}

	err := reporter.Order(args)

	assert.ErrorIs(t, err, ArgsError)
}

func TestOrderUnauthorized(t *testing.T) {
	debClientMock := testdata.NewDebClientMock()
	errorAssertion := errors.New("unauthorized")
	debClientMock.AddMockResponse(testdata.MockResponse{Error: errorAssertion})
	reporter := Reporter{DebClient: debClientMock}
	args := OrderArgs{Email: ""}

	err := reporter.Order(args)

	assert.ErrorIs(t, err, errorAssertion)
}

func TestOrderForbidden(t *testing.T) {
	debClientMock := testdata.NewDebClientMock()
	debClientMock.AddMockResponse(testdata.MockResponse{StatusCode: http.StatusForbidden})
	reporter := Reporter{DebClient: debClientMock}
	args := OrderArgs{Email: ""}

	err := reporter.Order(args)

	assert.ErrorIs(t, err, SubscriptionError)
}

func TestOrderNotOkResponse(t *testing.T) {
	debClientMock := testdata.NewDebClientMock()
	debClientMock.AddMockResponse(testdata.MockResponse{StatusCode: http.StatusTeapot})
	reporter := Reporter{DebClient: debClientMock}
	args := OrderArgs{Email: ""}

	err := reporter.Order(args)

	assert.ErrorContains(t, err, fmt.Sprintf("failed to order report. Status code: %d", http.StatusTeapot))
}

func TestOrder(t *testing.T) {
	debClientMock := testdata.NewDebClientMock()
	debClientMock.AddMockResponse(testdata.MockResponse{StatusCode: http.StatusOK})
	reporter := Reporter{DebClient: debClientMock}
	args := OrderArgs{Email: ""}

	err := reporter.Order(args)

	assert.NoError(t, err)
}
