package vulnerability

import (
	"errors"
	"fmt"
	"github.com/debricked/cli/pkg/client/testdata"
	"net/http"
	"strings"
	"testing"
)

func TestOrderBadArgs(t *testing.T) {
	debClientMock := &testdata.DebClientMock{}
	reporter := Reporter{DebClient: debClientMock}
	args := struct{}{}
	err := reporter.Order(args)
	if err != ArgsError {
		t.Error("failed to assert args error")
	}
}

func TestOrderUnauthorized(t *testing.T) {
	debClientMock := testdata.NewDebClientMock()
	errorAssertion := errors.New("unauthorized")
	debClientMock.AddMockResponse(testdata.MockResponse{Error: errorAssertion})
	reporter := Reporter{DebClient: debClientMock}
	args := OrderArgs{Email: ""}
	err := reporter.Order(args)
	if err != errorAssertion {
		t.Error("failed to assert client error")
	}
}

func TestOrderForbidden(t *testing.T) {
	debClientMock := testdata.NewDebClientMock()
	debClientMock.AddMockResponse(testdata.MockResponse{StatusCode: http.StatusForbidden})
	reporter := Reporter{DebClient: debClientMock}
	args := OrderArgs{Email: ""}
	err := reporter.Order(args)
	if err != SubscriptionError {
		t.Error("failed to assert client error")
	}
}

func TestOrderNotOkResponse(t *testing.T) {
	debClientMock := testdata.NewDebClientMock()
	debClientMock.AddMockResponse(testdata.MockResponse{StatusCode: http.StatusTeapot})
	reporter := Reporter{DebClient: debClientMock}
	args := OrderArgs{Email: ""}
	err := reporter.Order(args)
	errMsg := fmt.Sprintf("failed to order report. Status code: %d", http.StatusTeapot)
	if !strings.Contains(err.Error(), errMsg) {
		t.Error("failed to assert error message for uknown status code")
	}
}

func TestOrder(t *testing.T) {
	debClientMock := testdata.NewDebClientMock()
	debClientMock.AddMockResponse(testdata.MockResponse{StatusCode: http.StatusOK})
	reporter := Reporter{DebClient: debClientMock}
	args := OrderArgs{Email: ""}
	err := reporter.Order(args)
	if err != nil {
		t.Error("failed to assert that no error occurred")
	}
}
